name: Create Release Draft

on:
  workflow_dispatch:
    inputs:
      frontend:
        description: "Release frontend"
        required: true
        default: false
        type: boolean

permissions:
  contents: write
  actions: write
  pull-requests: read

jobs:
  set-targets:
    runs-on: ubuntu-latest
    outputs:
      targets: ${{ steps.set-targets.outputs.targets }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set targets based on PR content
        id: set-targets
        run: |
          TARGETS=()
          if [ "${{ github.event.inputs.frontend }}" = "true" ]; then
            TARGETS+=("web-frontend")
          fi
          echo "Release Targets: ${{ steps.set-targets.outputs.targets }}"
          echo targets=$(printf '%s\n' "${TARGETS[@]}" | jq -R . | jq -s .) >> $GITHUB_OUTPUT

  create-draft-release:
    runs-on: ubuntu-latest
    needs: [set-targets]
    if: ${{ needs.set-targets.outputs.targets != '[]' && needs.set-targets.outputs.targets != '' }}
    strategy:
      matrix:
        # リリース対象別に並列実行
        target: ${{fromJson(needs.set-targets.outputs.targets)}}

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - uses: actions/checkout@v4.2.2
        with:
          fetch-depth: 0

      # 関連する直近のタグを取得
      - name: Get latest tag
        id: previous_tag
        uses: ./.github/actions/get-latest-tag
        with:
          prefix: ${{ matrix.target }}

      # パッチバージョンを+1したタグを生成
      - name: Get Release Tag
        if: steps.previous_tag.outputs.tag != ''
        id: release_tag
        run: |
          echo tag=$(echo ${{ steps.previous_tag.outputs.tag }} | awk -F. -v OFS=. '{$NF += 1 ; print}') >> $GITHUB_OUTPUT

      - name: Push tag
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions"
          git tag ${{ steps.release_tag.outputs.tag }}
          git push origin ${{ steps.release_tag.outputs.tag }}

      - name: Generate CHANGELOG file
        id: generate_changelog_file
        run: |
          config_file_path=".github/release.yml"
          if [ "${{ matrix.target }}" = "web-frontend" ]; then
            config_file_path=".github/RELEASE_NOTE_TEMPLATE/web-front.yml"
          fi

          body_path="changelogs/${{ matrix.target }}/CHANGELOG.txt"
          body=$(gh api --method POST repos/akaneburyo/gha-playground/releases/generate-notes \
            -f "target_commitish=main" \
            -f "tag_name=${{ steps.release_tag.outputs.tag }}" \
            -f "previous_tag_name=${{ steps.previous_tag.outputs.tag }}" \
            -f "configuration_file_path=${config_file_path}" \
            | jq .body | sed 's/"//g')
          mkdir -p changelogs/${{ matrix.target }}
          echo -e "${body}" >> ${body_path}
          sed 's/\n//g' ${body_path}
          echo "body_path=${body_path}" >> $GITHUB_OUTPUT

      - name: Create Draft Release
        id: create-draft-release
        uses: softprops/action-gh-release@v2
        with:
          draft: true
          target_commitish: ${{ github.ref }}
          tag_name: ${{ steps.release_tag.outputs.tag }}
          body_path: ${{ steps.generate_changelog_file.outputs.body_path }}

      - name: Remove CHANGELOG file
        id: remove_changelog_file
        run: |
          rm ${{ steps.generate_changelog_file.outputs.body_path }}

      # - name: Notify to Slack
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK_PRIORITY_LOW_URL }}
      #     SLACK_CHANNEL: proj_shiharai_notification_github
      #     SLACK_TITLE: "Draft Release Created for ${{ matrix.target }}"
      #     SLACK_MESSAGE: "${{ steps.create-draft-release.outputs.url }}"
      #     SLACK_COLOR: good
